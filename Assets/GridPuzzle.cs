//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.34014
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
namespace AssemblyCSharp
{
	public class GridPuzzle : MonoBehaviour
	{
			public Tile tilePrimeiro;
			public Tile tileSegundo;
			public Tile tileTerceiro;
			public Tile tileQuarto;
			public String nomeTileQueFoiClicado; //qd alguem clica num tile, esse nome muda
			Tile[] tiles; //diz quais as acoes a serem executadas e em que ordem
				public GridPuzzle()
				{
				}
			
				public void alguemClicouNumTile(String nomeTile)
				{
					if (nomeTileQueFoiClicado.Length > 0) 
					{
						//alguem ja havia clicado num tile antes. Vamos trocar eles de posicao. Primeiro passo: Achar
						Tile umTile = null;
						Tile outroTile = null;
						int posicaoUmTile = -1;
						int posicaoOutroTile = -1;

						for(int i = 0; i < tiles.Length; i++)
						{
							String nome = tiles[i].getNome();
							if(nome.CompareTo(nomeTile) == 0 || nome.CompareTo(nomeTileQueFoiClicado) == 0)
							{
								if(umTile == null)
								{
									umTile = tiles[i];
									posicaoUmTile = i;
								}
								else
								{
									outroTile = tiles[i];
									posicaoOutroTile = i;
								}
							}
						}

						//agora vamos trocar os tiles de posicao graficamente
						trocarPosicaoDosTiles(tiles[posicaoUmTile], tiles[posicaoOutroTile]);
						//agora vamos mudar os tiles de posicao criando um novo array com os tiles nas posicoes trocadas
						
						Tile[] newTiles = new Tile[tiles.Length];
						for(int j = 0; j < newTiles.Length; j++)
						{
							if(j == posicaoUmTile)
							{
								newTiles[j] = outroTile;
							}
							else if(j == posicaoOutroTile)
							{
								newTiles[j] = umTile;
							}
							else
							{
								newTiles[j] = tiles[j];
							}
						}

						//agora o valor desse novo array vai para o velho
						tiles = newTiles;

						//nenhum tile deve ter sido clicado anteriormente
						nomeTileQueFoiClicado = "";

					} 
					else 
					{
						nomeTileQueFoiClicado = nomeTile;
					}

				}
				
				public void trocarPosicaoDosTiles(Tile t1, Tile t2)
				{
					//Debug.Log ("t1:" + t1.getAcao() + ";" + "t2:" + t2.getAcao());
					GameObject g1 = GameObject.Find(t1.getNome());
					GameObject g2 = GameObject.Find(t2.getNome());
				
					Vector3 temp = new Vector3();
					temp.Set(g1.transform.position.x, g1.transform.position.y, g1.transform.position.z);
					g1.transform.position = g2.transform.position;
					g2.transform.position = temp;
					
				}
				public String[] pegarOrdemDasAcoes()
				{
					String[] acoes = new String[tiles.Length];
					int percorredorAcoes = 0;
						for (int i = 0; i < tiles.Length; i++) 
						{
							Tile umTile = tiles[i];
							acoes[percorredorAcoes] = umTile.getAcao();
							percorredorAcoes = percorredorAcoes + 1;
						}
					return acoes;
				}
		// Use this for initialization
		void Start () 
		{
			tilePrimeiro.setarAcao("pularbaixo");
			tileSegundo.setarAcao("pularalto");
			tilePrimeiro.setarNome("tile1");
			tileSegundo.setarNome("tile2");
			tileTerceiro.setarAcao("subirescada");
			tileTerceiro.setarNome("tile3");
			tileQuarto.setarAcao("atacar");
			tileQuarto.setarNome("tile4");
			tiles = new Tile[4];
			tiles[0] = tilePrimeiro;
			tiles[1] = tileSegundo;
			tiles[2] = tileTerceiro;
			tiles[3] = tileQuarto;
			nomeTileQueFoiClicado = "";
		}
		
		
		void Update () {
		}
	}
}

